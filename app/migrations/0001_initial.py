# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-03-20 07:57
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_role', models.CharField(blank=True, choices=[('a', 'Admin'), ('o', 'Operator'), ('s', 'Supplier')], max_length=10, null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Civilians',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('middle_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(max_length=30)),
                ('contact', models.IntegerField()),
                ('dob', models.DateField()),
                ('address_line_1', models.CharField(max_length=100)),
                ('address_line_2', models.CharField(blank=True, max_length=100, null=True)),
                ('address_line_3', models.CharField(blank=True, max_length=100, null=True)),
                ('gender', models.CharField(choices=[('m', 'Male'), ('f', 'Female'), ('o', 'Other')], default='m', max_length=10)),
                ('aadhar_number', models.IntegerField()),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('pincode', models.IntegerField()),
                ('blood_group', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Families',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=30)),
                ('number_of_members', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Shelter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('total_capacity_of_people', models.IntegerField()),
                ('capacity_occupied', models.IntegerField(default=0)),
                ('shelter_latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('shelter_longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('shelter_type', models.CharField(choices=[('g', 'government'), ('a', 'ad-hoc')], default='g', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Stocks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_packets_available', models.IntegerField()),
                ('food_packets_needed', models.IntegerField(default=0)),
                ('first_aid_packets_available', models.IntegerField()),
                ('first_aid_packets_needed', models.IntegerField(default=0)),
                ('bedding_packets_available', models.IntegerField()),
                ('bedding_packets_needed', models.IntegerField(default=0)),
                ('water_available', models.IntegerField()),
                ('water_needed', models.IntegerField(default=0)),
                ('shelter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Shelter')),
            ],
        ),
        migrations.CreateModel(
            name='SupplierLogs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_supplied', models.IntegerField()),
                ('supply_type', models.CharField(choices=[('fp', 'food_packet'), ('fa', 'first_aid'), ('b', 'beddings'), ('w', 'water')], max_length=10)),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='civilians',
            name='allocated_shelter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='allocated_shelter', to='app.Shelter'),
        ),
        migrations.AddField(
            model_name='civilians',
            name='current_shelter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_shelter', to='app.Shelter'),
        ),
        migrations.AddField(
            model_name='civilians',
            name='family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Families'),
        ),
        migrations.AddField(
            model_name='systemusers',
            name='civilian',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Civilians'),
        ),
        migrations.AddField(
            model_name='systemusers',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='systemusers',
            name='shelter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Shelter'),
        ),
        migrations.AddField(
            model_name='systemusers',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
